const field = document.getElementById("field");
const cat = document.getElementById("cat");
const happinessDisplay = document.getElementById("happiness");

let happiness = 5;
let foodItems = [];

// Movement bounds
const fieldSize = 400;
const catSize = 50;
const foodSize = 30;

// Create food at random locations
function createFood() {
  const food = document.createElement("div");
  food.className = "food";
  food.style.top = `${Math.random() * (fieldSize - foodSize)}px`;
  food.style.left = `${Math.random() * (fieldSize - foodSize)}px`;
  field.appendChild(food);
  foodItems.push(food);
}

// Move the cat
function moveCat(direction) {
  const catPos = cat.getBoundingClientRect();
  const fieldPos = field.getBoundingClientRect();

  let newTop = parseInt(cat.style.top || 175);
  let newLeft = parseInt(cat.style.left || 175);

  if (direction === "up" && newTop > 0) newTop -= 20;
  if (direction === "down" && newTop < fieldSize - catSize) newTop += 20;
  if (direction === "left" && newLeft > 0) newLeft -= 20;
  if (direction === "right" && newLeft < fieldSize - catSize) newLeft += 20;

  cat.style.top = `${newTop}px`;
  cat.style.left = `${newLeft}px`;

  checkFoodCollision(newTop, newLeft);
}

// Check if the cat collects food
function checkFoodCollision(catTop, catLeft) {
  foodItems.forEach((food, index) => {
    const foodPos = food.getBoundingClientRect();

    if (
      Math.abs(catLeft - food.offsetLeft) < foodSize &&
      Math.abs(catTop - food.offsetTop) < foodSize
    ) {
      // Remove food and increase happiness
      food.remove();
      foodItems.splice(index, 1);
      happiness++;
      happinessDisplay.textContent = `Happiness: ${happiness}`;
      createFood(); // Spawn a new food item
    }
  });
}

// Decrease happiness over time
function decreaseHappiness() {
  happiness--;
  happinessDisplay.textContent = `Happiness: ${happiness}`;
  if (happiness <= 0) {
    alert("The cat is unhappy! Game over.");
    location.reload();
  }
}

// Add event listeners for arrow keys
document.addEventListener("keydown", (event) => {
  switch (event.key) {
    case "ArrowUp":
      moveCat("up");
      break;
    case "ArrowDown":
      moveCat("down");
      break;
    case "ArrowLeft":
      moveCat("left");
      break;
    case "ArrowRight":
      moveCat("right");
      break;
  }
});

// Game initialization
cat.style.top = "175px";
cat.style.left = "175px";
createFood();
setInterval(decreaseHappiness, 3000); // Decrease happiness every 3 seconds
